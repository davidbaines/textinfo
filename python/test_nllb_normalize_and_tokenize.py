# -*- coding: utf-8 -*-
"""Test NLLB normalize and tokenize.ipynb
Automatically generated by Colaboratory. Original file is located at  https://colab.research.google.com/drive/1rVcLqHKeZNARwZM_PSgomOx9sl3hHK1m
"""
import csv
import multiprocessing as mp
import re
import tokenizers

from collections import Counter
from pathlib import Path
from timeit import Timer
from typing import (IO, Iterable, Iterator, List, Optional, Sequence, Tuple, cast)
from unicodedata import name
from datasets import (get_dataset_config_names, get_dataset_split_names, load_dataset, load_dataset_builder)
from sacremoses import MosesPunctNormalizer
from tqdm import tqdm
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

# Set the paths to 
root = Path("C:/Gutenberg")
root = Path("E:/Work/DCB")
original_path = root / "MT/scripture"
tokenized_path = root / "MT/tokenized"
#report_path = root / "MT/charfreq"

tokenized_file_prefix = ''
special_token = u"\uFFFC"
start_of_word = '‚ñÅ'
space = ' '

mpn = MosesPunctNormalizer()
mpn.substitutions = [(re.compile(r), sub) for r, sub in mpn.substitutions]

unknown_code_points = set([160,178,179,185,188,189,276,280,292,300,308,334,340,358,364,368,374,384,386,398,403,407,415,433,439,440,441,451,461,463,465,467,471,472,478,479,484,485,489,490,491,500,501,510,511,513,530,531,552,553,555,573,578,579,580,581,583,584,585,586,587,588,589,591,619,704,713,715,726,727,732,763,764,783,785,786,789,790,795,804,805,814,821,824,830,837,847,863,868,894,900,903,987,1120,1121,1123,1126,1127,1135,1136,1137,1138,1141,1143,1146,1147,1150,1151,1155,1158,1159,1173,1188,1189,1194,1216,1217,1218,1223,1224,1231,1232,1233,1235,1238,1239,1250,1254,1255,1259,1264,1265,1266,1267,1306,1307,1308,1309,1426,1427,1429,1432,1434,1435,1436,1437,1438,1439,1440,1441,1442,1446,1447,1448,1449,1450,1451,1452,1453,1454,1459,1466,1472,1476,1477,1478,1792,1793,1797,1800,1808,1810,1811,1812,1813,1815,1816,1817,1818,1819,1821,1823,1824,1825,1826,1827,1829,1830,1832,1833,1834,1835,1836,1840,1842,1843,1845,1846,1848,1849,1850,1852,1853,1855,1857,1858,1859,1863,1881,1896,1907,2179,2181,2188,2221,2356,2400,2417,2429,2493,2500,2519,2524,2527,2528,2585,2590,2614,2689,2713,2748,2749,2756,2784,2877,2884,2902,2903,2908,2909,3097,3101,3133,3140,3158,3177,3225,3260,3261,3268,3285,3286,3339,3357,3389,3396,3406,3459,3469,3475,3486,3491,3498,3570,3596,3635,3665,3674,3852,3907,3915,3917,3922,3927,3932,3941,3946,3955,3957,3963,3965,3972,3973,3985,3987,3994,3995,3996,3998,4000,4002,4005,4007,4010,4020,4021,4022,4026,4027,4110,4138,4176,4177,4178,4179,4180,4181,4182,4183,4192,4195,4198,4200,4202,4203,4205,4208,4210,4211,4215,4235,4236,4237,4642,4644,4671,4684,4692,4713,4737,4738,4740,4742,4749,4767,4832,4833,4839,4857,4858,4859,4860,4861,4862,4884,4888,4889,4890,4891,4892,4893,4895,4911,4912,4913,4932,4951,5121,5122,5123,5124,5125,5126,5130,5131,5132,5134,5136,5138,5140,5143,5145,5147,5150,5151,5152,5154,5155,5156,5158,5159,5160,5161,5167,5168,5169,5170,5171,5172,5176,5177,5178,5180,5182,5188,5190,5192,5193,5194,5196,5197,5198,5199,5200,5201,5205,5206,5207,5209,5213,5217,5219,5221,5222,5227,5228,5229,5230,5231,5232,5234,5235,5236,5237,5238,5240,5242,5246,5247,5248,5250,5251,5252,5257,5258,5259,5260,5261,5262,5264,5265,5266,5268,5278,5280,5281,5283,5284,5285,5286,5287,5288,5290,5291,5292,5294,5298,5302,5304,5306,5307,5308,5309,5312,5313,5314,5315,5316,5317,5319,5320,5321,5323,5325,5327,5328,5331,5332,5333,5334,5335,5336,5338,5339,5340,5342,5350,5352,5354,5356,5357,5358,5359,5360,5361,5362,5364,5365,5366,5368,5370,5372,5376,5378,5380,5381,5385,5388,5389,5390,5392,5393,5394,5395,5396,5397,5398,5399,5401,5403,5409,5411,5413,5414,5415,5416,5417,5418,5419,5421,5422,5433,5435,5437,5438,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5456,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5469,5470,5472,5474,5476,5478,5479,5481,5482,5483,5484,5485,5486,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5513,5518,5519,5520,5521,5522,5523,5524,5525,5530,5536,5538,5568,5569,5570,5571,5615,5616,5617,5620,5652,5653,5658,5659,5710,5711,5715,5741,5742,6045,6046,6054,6057,6064,6069,6097,6106,6108,6109,6439,6688,6689,6691,6692,6693,6694,6695,6696,6697,6698,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6725,6726,6727,6728,6729,6730,6731,6732,6735,6736,6739,6740,6741,6742,6744,6747,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6766,6767,6768,6769,6772,6773,6774,6778,6779,7435,7544,7547,7549,7620,7621,7682,7683,7685,7690,7691,7694,7696,7697,7710,7711,7712,7724,7725,7729,7730,7732,7733,7738,7739,7744,7750,7752,7757,7766,7767,7773,7776,7777,7786,7787,7790,7804,7805,7807,7809,7811,7812,7813,7820,7821,7825,7828,7829,7830,7831,7846,7848,7852,7856,7876,7878,7892,7894,7898,7904,7916,7918,7920,7922,7928,7937,7938,7939,7940,7941,7942,7944,7945,7947,7948,7949,7950,7953,7955,7956,7957,7960,7961,7962,7963,7964,7965,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7985,7986,7987,7988,7989,7990,7991,7992,7993,7996,7997,8000,8002,8003,8004,8005,8008,8009,8011,8012,8013,8017,8018,8019,8020,8021,8022,8023,8025,8029,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8049,8051,8053,8055,8057,8058,8059,8060,8061,8064,8065,8066,8068,8069,8070,8077,8080,8081,8084,8086,8087,8092,8095,8096,8100,8102,8103,8111,8115,8116,8118,8119,8125,8127,8131,8132,8135,8146,8147,8162,8163,8164,8165,8172,8179,8180,8183,8194,8195,8197,8198,8201,8202,8203,8204,8205,8206,8207,8209,8239,8266,8308,8309,8319,8321,8322,8323,8324,8325,8516,8531,8970,8971,8990,8991,9484,9488,9600,10018,10214,10215,10750,11360,11361,11362,11363,11596,11601,11620,11632,11647,11667,11668,11670,11746,11747,11754,11757,11760,11761,11812,11813,12288,12296,12297,12298,12299,12304,12305,12593,12594,12596,12599,12601,12609,12610,12613,12614,12616,12618,12623,12628,12631,12643,13433,13506,13529,13532,13566,13664,13688,13689,13693,13728,13751,13766,13782,13814,13844,13849,13885,14074,14176,14224,14424,14444,14451,14488,14578,14592,14617,14776,14802,14814,14817,14831,14841,14871,14890,14894,14896,14911,14946,14963,15062,15161,15350,15371,15382,15625,15875,15888,15979,16431,16495,17138,17160,17184,17195,17217,17337,17731,17805,17857,17935,17966,18013,18125,18249,18313,18358,18382,18392,18911,19145,19256,19326,19820,19984,19989,19995,20011,20038,20045,20054,20088,20097,20109,20121,20127,20130,20133,20137,20151,20163,20164,20177,20189,20190,20191,20205,20233,20235,20238,20267,20270,20278,20285,20291,20295,20311,20314,20318,20332,20334,20335,20336,20347,20348,20355,20356,20360,20367,20372,20374,20389,20392,20407,20430,20431,20432,20433,20442,20446,20447,20456,20461,20472,20475,20482,20495,20496,20500,20502,20520,20525,20537,20547,20556,20558,20565,20600,20601,20603,20613,20634,20642,20647,20660,20667,20674,20675,20681,20689,20702,20703,20707,20709,20717,20718,20725,20731,20742,20745,20752,20754,20756,20757,20759,20775,20791,20793,20795,20796,20800,20807,20812,20817,20820,20821,20828,20832,20834,20846,20862,20864,20880,20881,20893,20897,20898,20904,20905,20913,20918,20922,20923,20936,20939,20945,20950,20956,20959,20962,20964,20970,20976,20979,20980,20985,20990,20991,20993,20994,20996,21005,21006,21011,21030,21031,21032,21034,21038,21043,21045,21049,21052,21053,21057,21067,21068,21070,21072,21076,21084,21085,21111,21119,21128,21130,21139,21142,21158,21164,21170,21179,21182,21189,21196,21201,21207,21222,21242,21243,21248,21254,21257,21261,21263,21264,21277,21281,21283,21290,21295,21297,21321,21348,21350,21356,21359,21369,21373,21374,21395,21397,21405,21408,21410,21413,21414,21417,21422,21423,21424,21426,21444,21445,21466,21471,21474,21479,21480,21485,21486,21493,21500,21506,21510,21524,21525,21537,21544,21549,21550,21553,21555,21556,21557,21558,21564,21567,21571,21580,21584,21589,21596,21598,21603,21615,21617,21618,21621,21622,21623,21624,21627,21630,21632,21634,21635,21636,21638,21640,21647,21653,21657,21659,21661,21663,21665,21667,21668,21675,21679,21687,21688,21691,21693,21695,21698,21700,21702,21703,21710,21713,21714,21719,21725,21726,21734,21740,21742,21750,21756,21757,21761,21769,21774,21775,21782,21786,21792,21795,21798,21804,21805,21811,21825,21827,21828,21833,21840,21845,21846,21852,21853,21854,21859,21863,21866,21868,21872,21877,21880,21881,21883,21884,21886,21890,21891,21905,21938,21939,21956,21959,21961,21962,21968,21970,21972,21976,21978,21983,21985,21988,21989,21990,21999,22001,22003,22006,22007,22009,22016,22024,22029,22030,22031,22032,22038,22047,22060,22062,22063,22069,22070,22071,22073,22075,22079,22081,22083,22091,22092,22094,22096,22099,22109,22112,22114,22116,22117,22118,22121,22123,22124,22125,22127,22136,22137,22140,22144,22149,22156,22158,22159,22160,22165,22169,22171,22179,22181,22184,22187,22190,22199,22204,22210,22217,22225,22227,22231,22232,22244,22245,22250,22251,22257,22261,22265,22271,22276,22279,22300,22318,22319,22323,22342,22345,22349,22365,22368,22372,22378,22387,22389,22391,22396,22404,22427,22436,22438,22443,22446,22464,22485,22496,22525,22528,22538,22552,22558,22566,22576,22591,22592,22593,22603,22605,22616,22620,22623,22625,22626,22629,22642,22649,22656,22657,22661,22665,22666,22697,22702,22715,22718,22725,22726,22737,22741,22744,22745,22748,22751,22752,22754,22761,22771,22774,22777,22778,22779,22780,22784,22809,22819,22820,22829,22841,22846,22849,22850,22852,22864,22869,22874,22889,22918,22920,22941,22953,22959,22962,22963,22974,22989,22993,22998,23000,23011,23016,23020,23033,23045,23047,23048,23052,23077,23092,23105,23113,23114,23146,23149,23158,23159,23167,23194,23202,23216,23218,23219,23224,23228,23230,23234,23243,23252,23254,23255,23264,23265,23267,23280,23285,23290,23291,23304,23308,23321,23325,23338,23341,23348,23352,23360,23365,23372,23377,23386,23387,23388,23397,23402,23408,23410,23411,23413,23418,23419,23423,23428,23435,23456,23462,23483,23491,23493,23495,23504,23508,23509,23510,23511,23512,23518,23522,23524,23525,23536,23539,23557,23577,23595,23609,23622,23625,23630,23632,23633,23641,23643,23644,23649,23650,23651,23656,23663,23673,23697,23700,23702,23703,23724,23725,23754,23755,23776,23782,23784,23789,23791,23805,23809,23828,23831,23833,23835,23842,23853,23869,23895,23913,23938,23943,23961,23965,23992,23994,23996,23997,24005,24009,24013,24018,24020,24022,24051,24053,24055,24063,24069,24075,24081,24084,24088,24090,24091,24092,24097,24101,24104,24114,24119,24131,24132,24135,24140,24151,24153,24159,24162,24170,24172,24173,24183,24192,24210,24214,24217,24243,24245,24248,24254,24258,24260,24275,24277,24282,24283,24285,24289,24296,24297,24298,24300,24309,24313,24327,24331,24337,24338,24340,24344,24347,24354,24361,24365,24367,24380,24384,24394,24396,24398,24408,24429,24436,24447,24451,24455,24457,24458,24472,24476,24480,24487,24488,24492,24495,24509,24527,24528,24529,24530,24534,24541,24545,24548,24557,24561,24571,24578,24589,24591,24601,24603,24609,24614,24625,24641,24643,24645,24647,24650,24653,24665,24666,24679,24682,24684,24691,24696,24698,24699,24700,24703,24708,24716,24717,24730,24731,24734,24756,24760,24761,24765,24775,24789,24792,24795,24797,24806,24811,24813,24814,24817,24820,24827,24832,24838,24842,24846,24848,24860,24864,24867,24876,24880,24884,24887,24892,24898,24900,24903,24906,24909,24913,24915,24921,24922,24925,24926,24927,24932,24939,24947,24948,24949,24959,24967,24970,24971,24978,24980,24986,25000,25004,25006,25007,25027,25032,25034,25036,25037,25042,25059,25061,25062,25065,25077,25078,25082,25085,25086,25087,25095,25101,25102,25109,25115,25118,25119,25122,25125,25137,25139,25150,25153,25155,25168,25169,25170,25179,25182,25184,25185,25194,25199,25210,25212,25225,25228,25236,25238,25247,25249,25256,25274,25279,25282,25284,25287,25288,25290,25292,25295,25297,25306,25314,25319,25326,25329,25332,25341,25352,25358,25363,25370,25374,25376,25377,25379,25393,25394,25399,25401,25404,25406,25410,25419,25422,25441,25443,25445,25449,25451,25457,25458,25462,25467,25472,25476,25479,25487,25488,25494,25497,25507,25516,25518,25520,25527,25530,25533,25540,25542,25543,25545,25549,25553,25561,25564,25565,25566,25570,25571,25577,25578,25580,25593,25597,25600,25601,25602,25605,25606,25609,25611,25614,25615,25616,25619,25620,25623,25625,25632,25633,25637,25638,25639,25661,25664,25675,25681,25682,25693,25695,25715,25718,25722,25723,25733,25736,25744,25745,25747,25753,25754,25762,25765,25766,25769,25779,25781,25787,25791,25794,25801,25808,25810,25813,25815,25816,25819,25822,25824,25825,25826,25827,25837,25839,25840,25841,25842,25851,25856,25860,25861,25862,25867,25871,25874,25876,25878,25880,25881,25883,25884,25890,25891,25892,25893,25898,25899,25900,25908,25912,25933,25941,25947,25949,25950,25986,25987,26005,26011,26013,26015,26017,26025,26027,26037,26046,26050,26051,26054,26060,26066,26075,26081,26083,26093,26096,26099,26115,26122,26124,26153,26164,26165,26171,26179,26185,26188,26191,26197,26206,26209,26212,26214,26231,26244,26248,26249,26252,26264,26269,26280,26289,26293,26296,26329,26330,26342,26345,26355,26359,26365,26388,26389,26402,26406,26422,26431,26439,26440,26458,26464,26472,26474,26483,26484,26485,26491,26492,26507,26520,26539,26541,26545,26546,26547,26548,26549,26551,26561,26586,26590,26601,26608,26613,26618,26621,26632,26635,26639,26642,26646,26658,26688,26690,26693,26701,26702,26704,26727,26728,26729,26740,26743,26751,26755,26767,26783,26784,26786,26791,26797,26803,26809,26818,26838,26855,26864,26865,26873,26880,26934,26941,26954,26963,26967,26974,26976,26979,26987,26991,26999,27001,27003,27012,27016,27030,27035,27046,27047,27048,27051,27053,27057,27067,27073,27084,27091,27094,27099,27114,27123,27146,27153,27166,27179,27189,27192,27216,27227,27233,27257,27264,27280,27292,27296,27299,27311,27330,27336,27347,27354,27356,27357,27359,27370,27372,27386,27403,27414,27422,27445,27447,27449,27453,27462,27470,27476,27477,27481,27483,27487,27513,27516,27519,27523,27524,27539,27546,27547,27550,27553,27556,27566,27567,27568,27569,27570,27571,27575,27580,27581,27586,27589,27590,27595,27600,27607,27608,27609,27617,27623,27628,27635,27650,27652,27656,27664,27667,27684,27699,27710,27722,27737,27739,27748,27752,27754,27769,27777,27792,27795,27803,27808,27813,27815,27819,27820,27822,27837,27838,27845,27846,27856,27858,27860,27863,27870,27882,27883,27887,27899,27900,27908,27918,27921,27922,27947,27957,27958,27964,27965,27974,27975,27978,27985,27987,28001,28003,28009,28016,28025,28028,28046,28051,28053,28054,28059,28068,28070,28071,28072,28073,28078,28088,28095,28096,28102,28108,28113,28114,28118,28124,28132,28137,28138,28144,28147,28152,28154,28170,28173,28174,28183,28185,28189,28192,28196,28197,28208,28210,28218,28222,28227,28234,28237,28238,28239,28243,28251,28258,28270,28273,28275,28284,28291,28293,28297,28300,28325,28338,28343,28348,28354,28356,28364,28371,28372,28377,28379,28387,28388,28392,28393,28399,28402,28407,28433,28435,28442,28453,28454,28464,28478,28479,28487,28497,28502,28518,28525,28542,28544,28545,28550,28551,28552,28556,28558,28567,28568,28572,28573,28577,28579,28593,28601,28606,28609,28626,28629,28632,28635,28640,28644,28652,28657,28659,28661,28662,28666,28681,28689,28698,28701,28703,28704,28710,28712,28720,28734,28753,28790,28799,28818,28825,28843,28844,28847,28851,28855,28861,28865,28888,28889,28891,28892,28893,28907,28908,28915,28921,28925,28938,28949,28951,28953,28956,28974,28975,28997,28998,28999,29004,29006,29007,29009,29014,29022,29026,29029,29030,29060,29063,29071,29076,29078,29081,29085,29088,29100,29115,29118,29121,29124,29134,29141,29145,29152,29158,29164,29165,29166,29179,29180,29191,29193,29197,29200,29223,29232,29241,29248,29270,29271,29272,29277,29279,29281,29283,29286,29295,29300,29301,29302,29303,29304,29310,29313,29314,29316,29330,29334,29343,29346,29384,29389,29390,29406,29408,29409,29413,29424,29432,29433,29437,29451,29458,29462,29465,29469,29477,29484,29492,29495,29502,29507,29520,29527,29536,29552,29562,29566,29582,29599,29611,29613,29618,29619,29626,29641,29662,29673,29674,29680,29701,29705,29711,29712,29730,29733,29741,29742,29749,29750,29781,29785,29795,29801,29808,29822,29824,29833,29835,29838,29840,29852,29859,29864,29867,29885,29898,29908,29920,29923,29924,29934,29940,29943,29953,29956,29964,29966,29969,29973,29982,29993,29995,29996,29999,30021,30022,30036,30042,30045,30054,30055,30069,30072,30079,30087,30090,30091,30100,30102,30106,30113,30116,30117,30126,30129,30133,30141,30144,30146,30154,30157,30159,30162,30164,30169,30176,30184,30186,30187,30189,30194,30195,30198,30201,30204,30206,30207,30208,30209,30210,30215,30227,30230,30238,30240,30241,30242,30247,30248,30250,30251,30256,30259,30260,30261,30264,30266,30278,30279,30281,30286,30296,30303,30305,30306,30307,30308,30311,30313,30315,30316,30320,30321,30322,30328,30337,30338,30344,30350,30355,30364,30384,30385,30394,30402,30403,30405,30408,30412,30413,30414,30415,30430,30437,30442,30447,30449,30457,30459,30472,30474,30491,30498,30502,30504,30505,30511,30518,30520,30529,30543,30544,30554,30556,30558,30565,30568,30570,30571,30572,30589,30590,30592,30596,30597,30599,30603,30604,30610,30613,30617,30624,30626,30629,30631,30633,30634,30640,30646,30647,30651,30653,30657,30663,30679,30682,30684,30685,30691,30694,30699,30700,30715,30732,30742,30749,30754,30755,30757,30759,30768,30776,30778,30782,30787,30805,30813,30839,30855,30857,30867,30876,30879,30881,30883,30887,30889,30890,30897,30910,30922,30923,30932,30933,30937,30938,30945,30947,30951,30956,30963,30964,30970,30973,31017,31018,31019,31025,31041,31047,31063,31066,31067,31068,31071,31083,31100,31103,31104,31108,31142,31143,31155,31156,31167,31171,31174,31189,31206,31207,31224,31235,31240,31252,31255,31260,31263,31264,31277,31291,31301,31305,31310,31313,31328,31329,31344,31353,31357,31360,31368,31373,31377,31381,31382,31388,31389,31392,31397,31400,31401,31402,31404,31405,31407,31408,31412,31419,31423,31428,31429,31431,31432,31434,31442,31446,31450,31459,31462,31466,31475,31483,31487,31491,31492,31494,31496,31503,31504,31513,31518,31525,31528,31531,31539,31541,31548,31562,31565,31567,31568,31571,31579,31581,31597,31598,31599,31604,31629,31631,31634,31636,31637,31641,31643,31645,31648,31657,31659,31686,31691,31696,31699,31705,31713,31721,31729,31735,31742,31751,31757,31762,31783,31786,31787,31790,31799,31800,31806,31811,31824,31827,31830,31833,31845,31852,31854,31860,31864,31869,31875,31876,31893,31900,31903,31914,31921,31922,31925,31944,31954,31959,31961,31964,31965,31968,31970,31982,31984,31988,31990,32003,32006,32010,32028,32033,32037,32046,32058,32061,32063,32067,32079,32083,32092,32104,32110,32112,32115,32121,32122,32130,32137,32143,32145,32152,32156,32162,32166,32171,32172,32181,32184,32185,32189,32190,32203,32216,32220,32221,32222,32251,32256,32258,32264,32266,32267,32272,32286,32306,32307,32309,32310,32311,32315,32323,32326,32327,32333,32336,32341,32345,32346,32353,32354,32361,32365,32366,32371,32375,32376,32377,32379,32381,32386,32397,32398,32402,32403,32404,32411,32412,32419,32428,32433,32438,32442,32453,32458,32462,32466,32478,32483,32491,32494,32495,32496,32503,32504,32506,32509,32512,32516,32521,32526,32530,32533,32538,32541,32544,32546,32548,32550,32557,32560,32568,32574,32580,32581,32583,32584,32588,32590,32591,32592,32596,32604,32607,32611,32619,32637,32641,32646,32647,32648,32666,32669,32673,32674,32675,32696,32697,32718,32725,32728,32736,32737,32742,32745,32750,32753,32755,32761,32772,32774,32779,32781,32785,32786,32792,32793,32796,32801,32806,32808,32824,32831,32833,32834,32838,32850,32865,32872,32883,32885,32886,32892,32894,32895,32899,32900,32903,32910,32912,32936,32942,32945,32948,32958,32959,32964,32985,32987,32989,32996,32997,33005,33007,33011,33012,33013,33014,33015,33040,33043,33046,33051,33059,33065,33071,33081,33086,33099,33100,33105,33125,33133,33134,33135,33137,33140,33147,33150,33153,33154,33158,33162,33171,33172,33173,33179,33182,33193,33203,33210,33215,33216,33219,33226,33228,33229,33242,33248,33255,33260,33275,33276,33277,33278,33280,33281,33282,33285,33296,33300,33302,33304,33307,33308,33329,33333,33336,33369,33375,33384,33390,33395,33399,33426,33436,33439,33445,33446,33451,33465,33467,33475,33479,33485,33488,33489,33493,33502,33503,33524,33529,33537,33541,33542,33543,33545,33551,33556,33564,33568,33575,33579,33588,33589,33592,33593,33600,33605,33606,33610,33615,33616,33626,33640,33643,33651,33659,33660,33661,33686,33694,33696,33698,33715,33721,33725,33726,33727,33729,33733,33735,33745,33750,33762,33780,33795,33804,33805,33806,33809,33821,33823,33830,33831,33852,33890,33894,33897,33899,33903,33905,33911,33912,33914,33948,33950,33965,33970,33978,33990,33999,34006,34028,34032,34042,34047,34068,34074,34085,34091,34093,34095,34098,34100,34107,34110,34113,34115,34118,34122,34136,34142,34154,34157,34159,34164,34181,34184,34201,34203,34216,34224,34234,34254,34268,34282,34291,34298,34303,34310,34314,34315,34326,34338,34360,34367,34368,34383,34391,34398,34417,34426,34427,34428,34433,34434,34443,34451,34453,34468,34471,34473,34479,34481,34496,34502,34506,34519,34521,34527,34532,34541,34544,34555,34558,34578,34579,34581,34583,34586,34590,34593,34594,34595,34596,34597,34612,34615,34623,34631,34635,34638,34643,34647,34648,34655,34662,34664,34666,34670,34672,34673,34677,34680,34683,34690,34718,34723,34725,34731,34734,34736,34739,34749,34752,34753,34756,34758,34759,34762,34763,34784,34789,34796,34811,34815,34821,34822,34829,34835,34837,34847,34855,34865,34866,34870,34873,34875,34885,34890,34898,34900,34905,34910,34914,34922,34924,34926,34930,34933,34937,34938,34942,34943,34949,34952,34962,34970,34974,34980,34986,34993,34996,35008,35018,35022,35032,35033,35044,35055,35060,35070,35074,35082,35084,35088,35091,35099,35105,35109,35114,35115,35123,35124,35126,35128,35137,35139,35140,35158,35162,35163,35164,35172,35178,35180,35183,35195,35203,35209,35210,35219,35220,35224,35233,35238,35241,35244,35247,35250,35255,35263,35269,35276,35280,35281,35284,35293,35307,35315,35335,35337,35340,35344,35349,35350,35355,35365,35382,35390,35392,35398,35400,35406,35409,35412,35414,35424,35425,35427,35436,35451,35461,35462,35466,35472,35473,35482,35491,35493,35496,35510,35516,35522,35524,35529,35533,35535,35537,35538,35547,35550,35551,35552,35559,35563,35569,35571,35578,35580,35585,35588,35600,35604,35615,35616,35617,35626,35627,35646,35649,35662,35663,35666,35670,35679,35693,35701,35709,35723,35724,35726,35730,35736,35737,35742,35743,35749,35751,35766,35767,35769,35773,35776,35787,35791,35795,35803,35807,35811,35815,35820,35822,35837,35839,35840,35844,35846,35850,35855,35856,35858,35861,35863,35865,35866,35867,35868,35881,35903,35915,35916,35918,35924,35925,35938,35947,35949,35961,35962,35977,35978,35995,36018,36019,36026,36029,36033,36037,36040,36052,36053,36057,36058,36065,36075,36076,36087,36088,36109,36112,36115,36124,36126,36132,36140,36142,36154,36155,36156,36159,36161,36162,36163,36169,36172,36184,36186,36199,36205,36246,36255,36274,36276,36286,36292,36296,36297,36299,36301,36302,36304,36308,36309,36310,36314,36315,36322,36323,36324,36325,36338,36346,36348,36349,36361,36363,36364,36372,36381,36382,36386,36387,36400,36401,36404,36405,36406,36409,36416,36417,36418,36420,36423,36426,36427,36428,36431,36432,36434,36437,36441,36451,36454,36455,36457,36460,36463,36466,36470,36479,36482,36485,36491,36495,36497,36499,36505,36506,36510,36512,36513,36517,36522,36525,36527,36528,36529,36544,36548,36550,36555,36571,36587,36592,36604,36613,36626,36627,36632,36633,36636,36638,36639,36645,36646,36653,36659,36667,36670,36671,36674,36677,36678,36685,36686,36692,36705,36706,36708,36711,36713,36717,36735,36743,36744,36745,36747,36750,36756,36759,36760,36761,36762,36771,36779,36782,36784,36797,36802,36811,36819,36821,36834,36837,36840,36841,36845,36852,36856,36868,36875,36877,36883,36885,36886,36891,36894,36909,36912,36917,36921,36922,36929,36932,36943,36944,36945,36946,36952,36968,36976,36980,36982,36988,36989,36995,36999,37001,37007,37032,37037,37041,37063,37073,37092,37122,37141,37145,37165,37193,37194,37195,37207,37213,37218,37219,37221,37223,37225,37234,37247,37251,37259,37278,37281,37288,37290,37294,37295,37298,37300,37302,37312,37313,37317,37328,37340,37350,37351,37376,37390,37392,37397,37406,37418,37431,37432,37445,37448,37451,37463,37470,37476,37496,37521,37525,37531,37532,37548,37554,37555,37561,37564,37580,37586,37604,37609,37624,37648,37656,37658,37667,37670,37672,37678,37694,37705,37706,37709,37722,37732,37738,37739,37740,37742,37756,37772,37780,37783,37786,37799,37808,37816,37827,37831,37832,37834,37846,37847,37848,37855,37860,37861,37864,37885,37891,37899,37903,37904,37929,37931,37934,37938,37942,37944,37946,37956,37959,37962,37970,37978,37979,37984,37987,37994,38000,38002,38004,38007,38012,38013,38015,38017,38031,38035,38045,38054,38055,38057,38062,38067,38073,38083,38085,38090,38096,38105,38107,38112,38126,38130,38136,38143,38148,38149,38152,38153,38155,38160,38161,38170,38179,38180,38181,38184,38189,38191,38197,38200,38201,38203,38208,38218,38220,38243,38255,38256,38259,38262,38274,38284,38290,38292,38296,38297,38308,38311,38312,38317,38329,38332,38333,38334,38339,38344,38346,38347,38348,38352,38356,38357,38358,38369,38370,38377,38383,38386,38389,38391,38392,38393,38394,38401,38404,38409,38420,38422,38428,38429,38433,38440,38444,38449,38466,38471,38475,38494,38495,38497,38504,38514,38530,38532,38541,38545,38552,38567,38580,38585,38588,38593,38601,38605,38607,38610,38616,38643,38649,38660,38662,38664,38665,38670,38673,38678,38684,38686,38698,38712,38713,38717,38718,38722,38724,38726,38729,38737,38753,38755,38759,38771,38774,38797,38799,38805,38808,38827,38828,38833,38837,38840,38847,38849,38851,38859,38873,38876,38878,38893,38894,38902,38907,38919,38935,38948,38950,38958,38960,38964,38967,38969,38983,38987,38990,39001,39002,39003,39014,39019,39025,39031,39037,39045,39047,39048,39050,39059,39066,39076,39087,39089,39091,39094,39095,39098,39099,39100,39108,39111,39112,39123,39125,39128,39137,39143,39146,39147,39149,39152,39153,39156,39170,39177,39181,39186,39188,39194,39198,39200,39207,39212,39214,39217,39221,39229,39237,39240,39243,39244,39245,39253,39255,39260,39262,39275,39281,39282,39284,39285,39287,39297,39304,39307,39312,39313,39333,39336,39341,39345,39361,39377,39389,39393,39394,39405,39406,39409,39423,39425,39426,39432,39436,39440,39480,39486,39489,39494,39501,39515,39519,39522,39523,39525,39533,39534,39535,39536,39545,39551,39553,39558,39559,39560,39563,39567,39580,39583,39585,39599,39600,39607,39612,39613,39616,39621,39631,39633,39634,39648,39651,39659,39661,39663,39668,39675,39683,39688,39691,39693,39699,39706,39711,39714,39715,39719,39720,39722,39724,39725,39726,39730,39739,39745,39748,39757,39758,39761,39955,39973,39981,39986,39995,40023,40055,40056,40120,40131,40132,40141,40158,40178,40179,40182,40195,40198,40210,40213,40222,40223,40227,40231,40232,40251,40253,40255,40256,40275,40284,40285,40288,40289,40298,40304,40329,40344,40346,40372,40373,40379,40383,40384,40386,40388,40403,40407,40409,40421,40434,40442,40455,40466,40469,40474,40475,40480,40481,40482,40483,40485,40486,40490,40492,40494,40497,40501,40502,40503,40509,40511,40517,40520,40524,40529,40533,40538,40542,40548,40551,40555,40557,40559,40560,40563,40565,40569,40572,40573,40576,40579,40581,40582,40584,40587,40595,40597,40601,40606,40610,40618,40619,40623,40624,40627,40634,40655,40667,40668,40669,40677,40679,40687,40692,40695,40701,40718,40727,40747,40748,40756,40761,40769,40780,40786,40789,40800,40803,40806,40807,40809,40814,40822,40831,40853,40859,40860,40863,40864,40869,40879,42192,42193,42194,42195,42196,42197,42198,42199,42200,42201,42202,42203,42204,42205,42206,42207,42208,42209,42210,42211,42213,42214,42215,42218,42219,42220,42221,42222,42223,42224,42225,42226,42227,42228,42229,42230,42231,42232,42233,42234,42235,42236,42237,42238,42239,42240,42242,42243,42245,42246,42247,42248,42249,42250,42251,42252,42254,42256,42258,42260,42261,42262,42264,42267,42268,42269,42270,42271,42272,42276,42278,42279,42280,42282,42283,42284,42285,42286,42288,42289,42290,42291,42293,42295,42298,42299,42301,42304,42305,42306,42307,42308,42309,42310,42311,42312,42313,42314,42315,42316,42317,42318,42319,42320,42321,42322,42323,42324,42325,42326,42327,42328,42329,42330,42332,42334,42337,42338,42340,42343,42344,42345,42346,42348,42349,42350,42351,42352,42353,42355,42356,42358,42359,42360,42361,42362,42364,42365,42366,42367,42369,42371,42374,42375,42377,42380,42381,42382,42383,42384,42385,42389,42393,42395,42396,42397,42398,42399,42401,42402,42403,42404,42406,42408,42411,42412,42414,42417,42419,42420,42421,42422,42423,42424,42426,42427,42428,42429,42431,42433,42434,42435,42436,42437,42438,42439,42441,42443,42445,42447,42450,42451,42453,42456,42458,42459,42460,42461,42462,42463,42464,42465,42466,42467,42468,42469,42470,42472,42473,42474,42475,42476,42478,42479,42481,42482,42483,42485,42487,42490,42491,42493,42496,42497,42498,42499,42500,42502,42504,42505,42506,42507,42571,42582,42583,42775,42776,42777,42778,43274,43275,43276,43277,43278,43279,43280,43281,43282,43283,43284,43285,43286,43287,43288,43289,43290,43291,43292,43293,43294,43295,43296,43297,43298,43299,43300,43301,43302,43303,43304,43305,43306,43308,43309,43310,43311,44041,44042,44055,44059,44064,44076,44079,44080,44088,44164,44165,44170,44171,44188,44189,44266,44268,44271,44312,44333,44348,44356,44405,44412,44418,44423,44424,44432,44444,44460,44488,44496,44497,44499,44561,44599,44621,44639,44641,44652,44667,44668,44669,44733,44748,44752,44753,44848,44851,44863,44921,44932,44936,44944,44985,45003,45005,45033,45044,45048,45085,45141,45181,45215,45255,45268,45272,45323,45330,45340,45341,45364,45365,45368,45400,45442,45443,45449,45451,45591,45660,45664,45672,45673,45705,45728,45731,45738,45794,45811,45819,45840,45845,45852,45918,45952,45955,45984,45992,46032,46039,46043,46048,46123,46179,46252,46265,46310,46401,46404,46411,46420,46428,46506,46513,46517,46528,46532,46543,46616,46664,46692,46756,46836,46848,46849,46920,46924,46932,46948,46952,46991,46999,47008,47032,47047,47284,47288,47297,47312,47327,47357,47362,47501,47554,47583,47587,47596,47604,47608,47616,47682,47689,47694,47699,47720,47721,47729,47748,47791,47933,47941,47949,47969,47971,48072,48080,48083,48136,48137,48142,48196,48204,48267,48304,48335,48336,48374,48460,48464,48488,48522,48529,48632,48668,48715,48718,48752,48755,48763,48765,48768,48772,48780,48784,48808,48820,48849,48856,48867,48869,48876,48905,48920,48923,48976,48981,49072,49101,49116,49220,49304,49317,49319,49327,49343,49349,49369,49371,49372,49384,49443,49462,49484,49511,49513,49565,49573,49576,49636,49651,49695,49705,49711,49713,49716,49736,49763,49776,49791,49829,49837,49903,49928,49937,49940,49944,49961,50041,50045,50056,50137,50140,50152,50153,50192,50220,50280,50417,50480,50488,50522,50548,50572,50573,50575,50581,50583,50592,50627,50634,50679,50686,50695,50704,50733,50753,50840,50844,50855,50909,50939,50941,50964,50995,51018,51036,51110,51120,51124,51133,51135,51136,51144,51211,51219,51275,51389,51400,51404,51471,51540,51544,51609,51673,51680,51682,51696,51725,51792,51844,51864,51922,51929,51984,51992,52000,52048,52057,52252,52255,52257,52263,52281,52287,52296,52396,52504,52647,52720,52728,52784,52833,52869,52871,52965,52985,53008,53009,53024,53028,53112,53125,53153,53220,53232,53233,53235,53237,53308,53377,53413,53449,53476,53487,53488,53569,53571,53572,53608,53628,53683,53767,53821,53892,53909,53951,53963,53972,54019,54030,54034,54038,54053,54064,54085,54141,54160,54212,54216,54271,54273,54383,54402,54409,54525,54549,54629,54652,54672,54685,54745,54773,54777,54803,54859,54865,54887,54896,54915,54928,54981,54993,54997,55012,55065,55068,55127,55139,55156,55177,55195,55197,55198,57344,57347,57348,57349,57352,57353,57354,57355,57356,57357,57360,57361,57362,57363,57364,57365,57366,57368,57370,57371,57372,57373,57374,57376,57378,57380,57381,57384,57386,57388,57389,57392,57394,57396,57397,57400,57402,57404,57405,57408,57409,57410,57411,57464,57466,57467,57469,57905,57906,57907,57908,57909,57910,58105,58106,58107,58108,58109,58110,58121,58128,58132,58133,58135,58242,58371,61809,61962,61976,61981,63758,63793,63907,63912,63915,63920,63924,64022,64034,64105,65281,65283,65288,65289,65292,65293,65294,65306,65307,65311,65339,65341,65381,65533,131726,132694,132796,134088,134285,134339,134488,134525,134542,134601,134810,134950,134966,134971,135054,135056,135188,135218,135389,137013,137171,138150,138753,142059,142062,142317,142411,142520,142526,142712,144308,145348,146991,147291,148150,148466,148472,148997,149016,149824,151041,152393,154591,155827,158120,162403,163232,163630,163772,164063,164080,165579,165612,166530,166723,166996,169776,174152,178046,178151,178374,179284,182287,183818,194575])


def decode_sp(line: str) -> str:
    return line.replace(" ", "").replace("\u2581", " ").lstrip()

def decode_sp_lines(lines: Iterable[str]) -> Iterable[str]:
    return map(decode_sp, lines)

def write_corpus(corpus_path: Path, sentences: Iterable[str], append: bool = False) -> None:
    with corpus_path.open("a" if append else "w", encoding="utf-8", newline="\n") as file:
        for sentence in sentences:
            file.write(sentence + "\n")

def load_corpus(corpus_path: Path) -> Iterator[str]:
    with corpus_path.open("r", encoding="utf-8-sig") as in_file:
        for line in in_file:
            line = line.strip()
            yield line

def has_unknown_tokens(file, unknown_tokens: Iterable[str]):
    
    for line in load_corpus(file):
        for unknown_token in unknown_tokens:
            if unknown_token in line:
                return True
    return False

def reset_tokenizer():
    # Reset the tokenizer
    return AutoTokenizer.from_pretrained(model_name, use_auth_token=True)

def tokens_from_codepoints(code_points):
    tokens = [ tokenizers.AddedToken(chr(code_point), single_word = False, lstrip = False, rstrip = False, normalized = True) for code_point in code_points]
    tokens.extend([tokenizers.AddedToken("\u2581" + chr(code_point), single_word = False, lstrip = True, rstrip = False, normalized = True) for code_point in code_points])
    return tokens


def tokenizer_with_unknown_tokens():
    tokenizer = reset_tokenizer()
    return tokenizer.add_tokens(tokens_from_codepoints(unknown_code_points))


def get_tokenized_filename(input_file):
    if tokenized_file_prefix not in input_file.name:
        return tokenized_file_prefix + input_file.name
    else:
        return input_file.name

def get_original_filename(tokenized_file):    
    return tokenized_file.name[len(tokenized_file_prefix):]

def get_original_file(tokenized_file):
    return original_path / get_original_filename(tokenized_file)

def get_tokenized_file(original_file):
    return tokenized_path / get_tokenized_filename(original_file)

def get_normalized_file(input_file):
    normalized_filename = tokenized_file.name[len(tokenized_file_prefix):] if tokenized_file_prefix in input_file.name else input_file.name
    return normalized_path / normalized_filename

def flatten(l):
    return [item for sublist in l for item in sublist]

# Preprocess then post process to work around HF bug related to added tokens.

#Insert \ufffc character after any added tokens in a string.
#Tokenize the string.
#Strip out sequences of _ and \ufffc tokens from results.

def prep(line):
    # Find every added character and add "\ufffc" after it.
    special_token = u"\uFFFC"

    prepped_line = ""
    for char in line:
        if ord(char) in unknown_code_points:
            prepped_line += char + special_token
        else :
            prepped_line += char
    return prepped_line


def post_process(tokenized_line):
    # Remove the '‚ñÅ', 'Ôøº' pair from the tokenized line.
    # Tokens that consist of a space and an added token only
    # are replaced with a start_of_word marker and the added token.
    
    index_to_remove = []
    for index in range(len(tokenized_line)):

        if tokenized_line[index] == special_token and tokenized_line[index-1] == start_of_word:
            index_to_remove.append(index-1)
            index_to_remove.append(index)
    
    post_processed_line = [token for index, token in enumerate(tokenized_line) if index not in index_to_remove]
        
    for index, token in enumerate(post_processed_line):
        if len(token) == 2 and token[0] == space and ord(token[1]) in unknown_code_points:
            post_processed_line[index] = start_of_word + token[1]

    return post_processed_line


def get_lines(files, line_numbers):

    files = flatten(files)
    print(f"Files are {files}, line_numbers are {line_numbers}.")

    all_lines = {}
    for file in files:
        print(file)
        lines = {}
        with open(file, "r", encoding="utf-8") as in_file:
            for line_number, line in enumerate(in_file):
                line_number += 1
                line = line.strip()      
                print(f"Line: {line_number}: {line}")
                if line_number in line_numbers:
                    lines[line_number] = line
                if line_number > max(line_numbers):
                    all_lines[file] = lines
                    break

        all_lines[file] = lines

    return all_lines   


def tokenize(input_file):


    unknown_tokens = ['<unk>']
    tokenized_file = tokenized_path /  get_tokenized_filename(input_file)
    if tokenized_file.is_file():
        if has_unknown_tokens(tokenized_file, [unknown_tokens]):

            print(f"Tokenizing: {input_file.name}")

            file = load_corpus(input_file)
            tokenized_lines = [" ".join(post_process(tokenizer.tokenize(mpn.normalize(prep(line))))) + "\n" for line in file]   

            #write the tokenized lines to the file.
            with open(tokenized_file, "w", encoding='utf-8') as tok_file:
                tok_file.writelines(tokenized_lines)
        elif :
            print(f"{tokenized_file.name}")

    return tokenized_file


def simple_tokenize_original(input_file):

    unknown_token = '<unk>'
    unknowns = Counter()
    tokenized_file = tokenized_path /  get_tokenized_filename(input_file)
    file = load_corpus(input_file)
    norm_lines = [mpn.normalize(line) for line in file]

    tokenized_lines = []
    for i, norm_line in enumerate(norm_lines):

        tokenized_line = " ".join(tokenizer.tokenize(norm_line)) + "\n" 
        tokenized_lines.append(tokenized_line)

        if unknown_token in tokenized_line:
            #print(f"Tokenizing {input_file.name} line {i+1}")
            #print(tokenized_line)
            #print(norm_line)
            tok_chars = ''.join(tokenized_line.split(unknown_token))
            unknown_chars = set(remove_chars(norm_line,tok_chars))
            #print(unknown_chars)
            for char in unknown_chars:
                unknowns[char] += norm_line.count(char)

    #write the tokenized lines to the file.
    with open(tokenized_file, "w", encoding='utf-8') as tok_file:
        tok_file.writelines(tokenized_lines)
        
    print(f"Read {input_file}  wrote tokenized version to {tokenized_file}")

    return (tokenized_file, unknowns)

def simple_tokenize(input_file):

    unknown_token = '<unk>'
    unknowns = Counter()
    tokenized_file = tokenized_path /  get_tokenized_filename(input_file)
    file = load_corpus(input_file)
    norm_lines = [mpn.normalize(prep(line)) for line in file]

    tokenized_lines = []
    for i, norm_line in enumerate(norm_lines):

        tokenized_list = tokenizer.tokenize(norm_line)
        post_processed_list = post_process(tokenized_list)
        tokenized_line = " ".join(post_processed_list) + "\n"
        
        tokenized_lines.append(tokenized_line)

        if unknown_token in tokenized_line:
            #print(f"Tokenizing {input_file.name} line {i+1}")
            #print(tokenized_line)
            #print(norm_line)
            tok_chars = ''.join(tokenized_line.split(unknown_token))
            unknown_chars = set(remove_chars(norm_line,tok_chars))
            #print(unknown_chars)
            for char in unknown_chars:
                unknowns[char] += norm_line.count(char)

    #write the tokenized lines to the file.
    with open(tokenized_file, "w", encoding='utf-8') as tok_file:
        tok_file.writelines(tokenized_lines)
        
    print(f"Read {input_file}  wrote tokenized version to {tokenized_file}")

    return (tokenized_file, unknowns)


original_files = sorted([file for file in original_path.glob("*.txt")])
tokenized_files = [get_tokenized_file(file)   for file in original_files]


"""# Download the model and tokenizer 
Construct a "fast" NLLB tokenizer (backed by HuggingFace‚Äôs tokenizers library). Based on BPE.
This tokenizer inherits from PreTrainedTokenizerFast which contains most of the main methods. Users should refer to this superclass for more information regarding those methods.
"""

#The tokenization method is <tokens> <eos> <language code> for source language documents, and <language code> <tokens> <eos> for target language documents.
#Documentation: https://huggingface.co/transformers/v2.11.0/main_classes/tokenizer.html

model_name = 'facebook/nllb-200-distilled-600M'

# Set the tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=True)
model     = AutoModelForSeq2SeqLM.from_pretrained(model_name)

special_tokens_dict = {'additional_special_tokens': ['<range>']}

num_added_special_toks = tokenizer.add_special_tokens(special_tokens_dict)
print('We have added', num_added_special_toks, 'special tokens', tokenizer.additional_special_tokens)

num_added_tokens = tokenizer.add_tokens(tokens_from_codepoints(unknown_code_points))
print(f"Added {num_added_tokens} tokens to the tokenizer. The tokenizers now recognizes {len(tokenizer)} tokens.\n")

model.resize_token_embeddings(len(tokenizer))  
# Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.# Tokenize all the scripture files. 

for file in tqdm(sorted(original_files)):
    tokenize(file)

#no_of_cpu = mp.cpu_count() - 4
#print(f"Number of processors available: {mp.cpu_count()} using {no_of_cpu}")
#pool = mp.Pool(no_of_cpu)
#results = pool.map(tokenize, sorted([file for file in original_files]))
#pool.close()

print(results)

"""
def compare(tokenized_file):

    original_file = get_original_file(tokenized_file)    
    vocab = tokenizer.get_vocab()
    unk_token = '<unk>'
    
    original_lines = [mpn.normalize(line) for line in load_corpus(original_file)]
    tokenized_lines = load_corpus(tokenized_file)

    done = False
    for i, (original_line, tokenized_line) in enumerate(zip(original_lines,tokenized_lines)):
        if done:
            break
        if unk_token in tokenized_line:
            #print(tokenized_line)
            #print(original_line)
            tok_chars = ''.join(tokenized_line.split(unk_token))
            unknown_chars = set(remove_chars(original_line,tok_chars))
            #print(unknown_chars)
            for char in unknown_chars:
                if char in vocab:
                    print(f"{tokenized_file.name} line {i+1} has unknown char {char} that is in vocabulary.")
                    print(f"{original_line}\n{tokenized_line}")
                    done = True


def alt_compare(tokenized_file):

    vocab = tokenizer.get_vocab()
    unk_token = '<unk>'

    tokenized_lines = load_corpus(tokenized_file)
    normalized_file = get_normalized_file(tokenized_file)    
    normalized_lines = load_corpus(normalized_file)
    
    done = False
    for i, (normalized_line, tokenized_line) in enumerate(zip(normalized_lines,tokenized_lines)):

        if done:
            break
        if unk_token in tokenized_line:
            
            #Remove unnecessary characters.
            tokenized_line  = remove_chars(tokenized_line, ["\n"," ","‚ñÅ"])
            remaining = remove_chars(normalized_line, ["\n"," "]) 

            knowns = tokenized_line.split(unk_token)
            for known in knowns:
                remaining.replace(known,'')

                print(f"{tokenized_file.name} line {i+1} has unknowns: {remaining}")
                print(f"{normalized_line}\n{tokenized_line}")
                done = True

vocab = tokenizer.get_vocab()
done = False
print(results[:2])
#for tokenized_file, unknowns in results:
#    if unknowns and not done:
#        print(unknowns)
#        for char in unknowns.keys():
#            if char in vocab:
#                print(f"Found {char} as unknown but it exists in the vocab in {tokenized_file}.")
#                alt_compare(tokenized_file)

vocab = tokenizer.get_vocab()
all_unknowns = Counter()
# unk_summary_file for all_unknowns
# unk_report_file for file by file unknowns

unk_report_lines = ["File produced by NLLBtokenizer_3 colab notebook, https://colab.research.google.com/drive/1jpCdpdLOY101tcMH0Bdq8GtT69anGoHY\n", "Char, Count, Unicode point, Unicode name, In vocab, File\n"]

for tokenized_file, unknowns in results:
    all_unknowns.update(unknowns)
    
    if len(unknowns) > 0:
        for char,count in unknowns.most_common():
            unk_report_lines.append(f"{char},{count},{char_name(char)},{ord(char)},{char in vocab},{tokenized_file.name}\n")

with open(unk_report_file, 'w', encoding='utf-8', newline='\n') as unk_report:
    unk_report.writelines(unk_report_lines)
print(f"Wrote the detailed report to {unk_report_file}")

with open(unk_summary_file, 'w', encoding='utf-8') as unk_summary:
    unk_summary.write("File produced by NLLBtokenizer_3 colab notebook, https://colab.research.google.com/drive/1jpCdpdLOY101tcMH0Bdq8GtT69anGoHY\n")
    unk_summary.write("Char,Count,Unicode name,Codepoint,In vocab,\n")
    for char, count in all_unknowns.most_common():
        unk_summary.write(f"{char},{count},{char_name(char)},{ord(char)},{char in vocab}\n")
print(f"Wrote the summary report to {unk_summary_file}")
"""