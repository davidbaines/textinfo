Can you add typing hints to this python code :

def main():
    parser = argparse.ArgumentParser(
        description="Download, unzip and extract text corpora from eBible."
    )
    parser.add_argument(
        "-d",
        "--force_download",
        default=False,
        action="store_true",
        help="Set this flag to overwrite all previous data and start again.",
    )
    parser.add_argument(
        "-s",
        "--overwrite_settings",
        default=False,
        action="store_true",
        help="Set this flag to overwrite the settings.xml files.",
    )
    parser.add_argument(
        "-e",
        "--overwrite_extracts",
        default=False,
        action="store_true",
        help="Set this flag to overwrite the extracted files.",
    )
    parser.add_argument(
        "-l",
        "--overwrite_licences",
        default=False,
        action="store_true",
        help="Set this flag to overwrite the licences.tsv file.",
    )
    parser.add_argument("folder", help="The base folder where others will be created.")

    args = parser.parse_args()
    # print(args)
    # exit()

    # Define base folder
    base = Path(args.folder)

    translations_csv_url = r"https://ebible.org/Scriptures/translations.csv"
    eBible_url = r"https://ebible.org/Scriptures/"
    file_suffix = "_usfm.zip"

    # The corpus folder is for the verse aligned text files.
    corpus_folder = base / "corpus"

    # The redistributable_folder folder is for the redistributable_folder downloaded files.
    # To this folder we add a settings.xml file that we create.
    # The settings.xml file is required for the extraction process.
    redistributable_folder = base / "projects"

    # Folder for the non-redistributable projects.
    non_redistributable_folder = base / "private_projects"

    # The zipped folder is where we download files from eBible.org
    downloads_folder = base / "downloads"

    metadata_folder = base / "metadata"

    logs = base / "logs"

    year, month, day, hour, minute = map(int, strftime("%Y %m %d %H %M").split())
    log_suffix = f"_{year}_{month}_{day}-{hour}_{minute}.log"
    log_filename = "ebible" + log_suffix
    logfile = logs / log_filename

    extract_log_file = logs / ("extract" + log_suffix)

    # The file to download from eBible.org
    translations_csv = metadata_folder / "translations.csv"

    # The file we will save that contains the licence information for each file.
    licence_file = metadata_folder / "licences.tsv"

    all_folders = [
        corpus_folder,
        redistributable_folder,
        non_redistributable_folder,
        downloads_folder,
        metadata_folder,
        logs,
    ]
    missing_folders = [folder for folder in all_folders if not folder.is_dir()]

    print(f"The base folder is : {base}")
    # base = r"F:/GitHub/davidbaines/eBible"

    if missing_folders:
        log_and_print(logfile, "The following folders are required:")
        for folder in all_folders:
            log_and_print(logfile, folder)
        log_and_print(logfile, "")

        log_and_print(
            logfile,
            "The following folders are required and will be created if you continue.",
        )
        for folder in missing_folders:
            log_and_print(logfile, folder)

        choice = ""
        while choice not in ["y", "n"]:
            choice = input("Would you like to continue? y /n ").lower()
        if choice == "y":
            # Create the required directories
            make_directories(missing_folders)
        elif choice == "n":
            exit(0)
    else:
        log_and_print(logfile, "All required folders already exist\n")

    if not translations_csv.is_file() or args.force_download:
        # Download the list of translations.
        log_and_print(
            logfile,
            f"Downloading list of translations from {translations_csv_url} to: {str(translations_csv)}",
        )
        download_file(translations_csv_url, translations_csv)

    # These wont download usually.
    wont_download = [
        "due_usfm.zip",
        "engamp_usfm.zip",
        "engnasb_usfm.zip",
        "khm-h_usfm.zip",
        "khm_usfm.zip",
        "sancol_usfm.zip",
        "sankan_usfm.zip",
        "spaLBLA_usfm.zip",
        "spanblh_usfm.zip",
    ]

    (
        all_files,
        redistributable_files,
        non_redistributable_files,
        to_download,
        already_downloaded,
    ) = get_download_lists(
        translations_csv, file_suffix, downloads_folder, wont_download=wont_download
    )

    redistributable_zipfiles = sorted(
        [downloads_folder / (file + file_suffix) for file in redistributable_files]
    )

    non_redistributable_zipfiles = sorted(
        [downloads_folder / (file + file_suffix) for file in non_redistributable_files]
    )

    # print(f"The first redistributable file is {redistributable_files[0]}")
    # print(f"The first non redistributable file is {non_redistributable_files[0]}")

    log_and_print(
        logfile,
        f"The translations csv file lists {len(all_files)} translations and {len(redistributable_files)} are redistributable.",
    )
    log_and_print(
        logfile,
        f"The translations csv file lists {len(non_redistributable_files)} non redistributable translations.",
    )
    log_and_print(
        logfile,
        f"{len(non_redistributable_files)} + {len(redistributable_files)} = {len(non_redistributable_files) + len(redistributable_files)}",
    )
    log_and_print(
        logfile,
        f"There are {len(already_downloaded)} files with the suffix {file_suffix} already in {downloads_folder}",
    )
    log_and_print(
        logfile, f"There are {len(wont_download)} files that usually fail to download."
    )
    log_and_print(logfile, f"There are {len(to_download)} files still to download.")

    # Download the required zipped USFM files.
    download_files(
        to_download,
        eBible_url,
        downloads_folder,
        logfile,
        redownload=args.force_download,
    )

    # print(f"Redist files = {redistributable_zipfiles}, {type(redistributable_zipfiles)}")
    # print(f"Non redist files = {non_redistributable_zipfiles}, {type(non_redistributable_zipfiles)}")

    # Unzip the redistributable downloaded files.
    redistributable_project_count = unzip_files(
        redistributable_zipfiles, file_suffix, redistributable_folder, logfile
    )

    # Unzip the non_redistributable downloaded files to the private_projects folder.
    unzip_files(
        non_redistributable_zipfiles, file_suffix, non_redistributable_folder, logfile
    )

    # print(f"{non_redistributable_files[0]} , {type(non_redistributable_files)}")

    # Check whether any non_redistributable files are in the redistributable folder and list them.
    incorrect_non_redistributable_folders = [
        redistributable_folder / non_redistributable_file
        for non_redistributable_file in non_redistributable_files
    ]
    incorrect_non_redistributable_folders = [
        folder for folder in incorrect_non_redistributable_folders if folder.is_dir()
    ]
    if incorrect_non_redistributable_folders:
        log_and_print(
            logfile,
            f"There are {len(incorrect_non_redistributable_folders)} non_redistributable projects in the redistributable project folder: {redistributable_folder}",
        )
        delete = input("Delete them Yes / No / Quit?")
        while delete.strip()[0].lower() not in "ynq":
            print("Please enter either yes or no, or q to exit.")
            delete = input("Delete them Yes / No / Quit?")

        if delete.strip()[0].lower() == "y":
            for (
                incorrect_non_redistributable_folder
            ) in incorrect_non_redistributable_folders:
                log_and_print(
                    logfile,
                    f"Deleting {len(incorrect_non_redistributable_folders)} non_redistributable projects from the redistributable project folder.",
                )
                shutil.rmtree(incorrect_non_redistributable_folder, ignore_errors=True)

        elif delete.strip()[0].lower() == "q":
            exit()

    if redistributable_project_count:
        # Write the licence file.
        write_licence_file(licence_file, logfile, redistributable_folder)
    else:
        log_and_print(logfile, f"There are no changes required to the licence file.")

    # Now add the Settings.xml file to each project folder.
    # print(f"Files extracted. ")
    redistributable_projects = {
        folder: str(folder.name)[:3]
        for folder in redistributable_folder.glob("*")
        if folder.is_dir() and folder.name in redistributable_files
    }
    # print(redistributable_projects, len(redistributable_projects))

    count_existing_settings_files = 0
    count_new_settings_files = 0

    for project_folder, language_code in redistributable_projects.items():
        settings_file = project_folder / "Settings.xml"
        if settings_file.is_file():
            count_existing_settings_files += 1
            # print(f"Settings.xml already exists in {project_folder}")
        else:
            count_new_settings_files += 1
            # print(f"Adding Settings.xml to {project_folder}")
            add_settings_file(project_folder, language_code)

    log_and_print(logfile, f"\nCreated {count_new_settings_files} Settings.xml files. There are {count_existing_settings_files} existing settings files."
    )

    # TO DO: Use silnlp.common.extract_corpora to extract all the project files.
    # If silnlp becomes pip installable then we can do that here with silnlp as a dependency.

    log_and_print(logfile, f"\nUse this command ONLY if you want to extract the non_redistributable files."
    )
    log_and_print(logfile, f"poetry run python -m silnlp.common.bulk_extract_corpora --input {non_redistributable_folder} --output <OUTPUT_FOLDER>"
    )

    log_and_print(logfile, f"\nThe files are ready for extracting. Use this command in the SILNLP repo to extract the redistributable files."
    )
    log_and_print(logfile, f"poetry run python -m silnlp.common.bulk_extract_corpora --input {redistributable_folder} --output {corpus_folder} --error-log {extract_log_file}"
    )


if __name__ == "__main__":
    main()